import { createClient } from '@supabase/supabase-js'

// CORRE√á√ÉO 1: Leitura correta das vari√°veis de ambiente do Vercel
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || ''
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || ''
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY || ''

// Verificar se as vari√°veis est√£o configuradas
if (!supabaseUrl || !supabaseAnonKey) {
  console.warn('‚ö†Ô∏è Vari√°veis do Supabase n√£o configuradas. Configure nas vari√°veis de ambiente.')
}

// Cliente p√∫blico (para leitura e opera√ß√µes autenticadas) - SSR Safe
export const supabase = supabaseUrl && supabaseAnonKey 
  ? createClient(supabaseUrl, supabaseAnonKey, {
      auth: {
        autoRefreshToken: true,
        persistSession: true,
        detectSessionInUrl: true,
        // Storage customizado que s√≥ funciona no cliente
        storage: {
          getItem: (key: string) => {
            if (typeof window === 'undefined') return null
            try {
              return localStorage.getItem(key)
            } catch (error) {
              console.warn('Erro ao acessar localStorage:', error)
              return null
            }
          },
          setItem: (key: string, value: string) => {
            if (typeof window === 'undefined') return
            try {
              localStorage.setItem(key, value)
            } catch (error) {
              console.warn('Erro ao salvar no localStorage:', error)
            }
          },
          removeItem: (key: string) => {
            if (typeof window === 'undefined') return
            try {
              localStorage.removeItem(key)
            } catch (error) {
              console.warn('Erro ao remover do localStorage:', error)
            }
          }
        }
      }
    })
  : null

// Cliente administrativo (para opera√ß√µes de escrita com service key)
export const supabaseAdmin = supabaseUrl && supabaseServiceKey
  ? createClient(supabaseUrl, supabaseServiceKey, {
      auth: {
        autoRefreshToken: false,
        persistSession: false
      }
    })
  : (supabaseUrl && supabaseAnonKey 
      ? createClient(supabaseUrl, supabaseAnonKey)
      : null)

// Fun√ß√£o para obter cliente autenticado com token do usu√°rio
export const getAuthenticatedClient = async () => {
  if (!supabase) {
    throw new Error('Supabase n√£o configurado')
  }

  const { data: { session }, error } = await supabase.auth.getSession()
  
  if (error) {
    console.error('‚ùå Erro ao obter sess√£o:', error)
    if (handleAuthError(error)) {
      throw new Error('Sess√£o expirada')
    }
    throw error
  }

  if (!session) {
    throw new Error('Usu√°rio n√£o autenticado')
  }

  // Retornar cliente com token de autentica√ß√£o
  return createClient(supabaseUrl, supabaseAnonKey, {
    global: {
      headers: {
        Authorization: `Bearer ${session.access_token}`
      }
    }
  })
}

// Fun√ß√£o para limpar sess√£o inv√°lida - SSR Safe
export const clearInvalidSession = async () => {
  if (!supabase || typeof window === 'undefined') return

  try {
    console.log('üßπ Limpando sess√£o inv√°lida...')
    await supabase.auth.signOut()
    
    // Limpar localStorage manualmente apenas no cliente
    const keysToRemove = [
      'sb-' + supabaseUrl.split('//')[1].split('.')[0] + '-auth-token',
      'supabase.auth.token',
      'supabase_auth_token'
    ]
    
    keysToRemove.forEach(key => {
      try {
        localStorage.removeItem(key)
      } catch (error) {
        console.warn('Erro ao limpar chave:', key, error)
      }
    })
    
    console.log('‚úÖ Sess√£o limpa com sucesso')
  } catch (error) {
    console.error('‚ùå Erro ao limpar sess√£o:', error)
  }
}

// Fun√ß√£o para verificar e tratar erros de autentica√ß√£o
export const handleAuthError = (error: any) => {
  if (error?.message?.includes('Invalid Refresh Token') || 
      error?.message?.includes('Refresh Token Not Found')) {
    console.log('üîÑ Detectado refresh token inv√°lido, limpando sess√£o...')
    clearInvalidSession()
    return true // Indica que o erro foi tratado
  }
  return false // Erro n√£o relacionado a refresh token
}

// Configurar listener para erros de autentica√ß√£o - apenas no cliente
if (typeof window !== 'undefined' && supabase) {
  supabase.auth.onAuthStateChange((event, session) => {
    console.log('üîê Estado de autentica√ß√£o mudou:', event)
    
    if (event === 'SIGNED_OUT') {
      console.log('üëã Usu√°rio deslogado')
    } else if (event === 'SIGNED_IN') {
      console.log('üëã Usu√°rio logado:', session?.user?.email)
    } else if (event === 'TOKEN_REFRESHED') {
      console.log('üîÑ Token renovado com sucesso')
    }
  })
}

// Interface para o produto no banco de dados
export interface DatabaseProduct {
  id: string
  nome: string
  marca: string
  preco: number
  descricao: string
  imagem_url: string
  estoque: number
  categorias: string[]
  created_at?: string
  updated_at?: string
}

// SQL para criar a tabela produtos (execute no painel do Supabase)
export const createProductsTableSQL = `
-- Criar tabela produtos
CREATE TABLE IF NOT EXISTS produtos (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  nome VARCHAR(255) NOT NULL,
  marca VARCHAR(100) NOT NULL,
  preco DECIMAL(10,2) NOT NULL,
  descricao TEXT,
  imagem_url TEXT NOT NULL,
  estoque INTEGER DEFAULT 0,
  categorias TEXT[] DEFAULT ARRAY['tenis'],
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Criar √≠ndices para melhor performance
CREATE INDEX IF NOT EXISTS idx_produtos_marca ON produtos(marca);
CREATE INDEX IF NOT EXISTS idx_produtos_categorias ON produtos USING GIN(categorias);
CREATE INDEX IF NOT EXISTS idx_produtos_created_at ON produtos(created_at);

-- Habilitar RLS (Row Level Security)
ALTER TABLE produtos ENABLE ROW LEVEL SECURITY;

-- Remover pol√≠ticas existentes se houver
DROP POLICY IF EXISTS "Permitir leitura p√∫blica de produtos" ON produtos;
DROP POLICY IF EXISTS "Permitir inser√ß√£o para usu√°rios autenticados" ON produtos;
DROP POLICY IF EXISTS "Permitir atualiza√ß√£o para usu√°rios autenticados" ON produtos;
DROP POLICY IF EXISTS "Permitir exclus√£o para usu√°rios autenticados" ON produtos;

-- CORRE√á√ÉO 3: Criar pol√≠ticas de seguran√ßa que exigem autentica√ß√£o
CREATE POLICY "Permitir leitura p√∫blica de produtos" ON produtos
  FOR SELECT USING (true);

CREATE POLICY "Permitir inser√ß√£o para usu√°rios autenticados" ON produtos
  FOR INSERT WITH CHECK (auth.uid() IS NOT NULL);

CREATE POLICY "Permitir atualiza√ß√£o para usu√°rios autenticados" ON produtos
  FOR UPDATE USING (auth.uid() IS NOT NULL);

CREATE POLICY "Permitir exclus√£o para usu√°rios autenticados" ON produtos
  FOR DELETE USING (auth.uid() IS NOT NULL);
`