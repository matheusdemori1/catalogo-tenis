import { NextRequest, NextResponse } from 'next/server'
import { createAuthenticatedClient } from '@/lib/supabase'

// GET /api/produtos/[id] - Buscar produto por ID
export async function GET(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const { id } = params
    console.log('üì° GET /api/produtos/[id] - Buscando produto:', id)
    
    // Extrair token de autentica√ß√£o do header
    const authToken = request.headers.get('authorization')?.replace('Bearer ', '')
    console.log('üîê Token de autentica√ß√£o:', authToken ? 'Presente' : 'Ausente')
    
    const supabase = createAuthenticatedClient(authToken)
    
    if (!supabase) {
      console.error('‚ùå Supabase n√£o configurado')
      return NextResponse.json({ error: 'Supabase n√£o configurado' }, { status: 500 })
    }

    console.log('üîç Buscando produto com ID:', id)

    const { data: produto, error } = await supabase
      .from('produtos')
      .select('*')
      .eq('id', id)
      .single()

    if (error) {
      console.error('‚ùå Erro ao buscar produto no Supabase:', error)
      console.error('‚ùå Detalhes do erro:', JSON.stringify(error, null, 2))
      
      if (error.code === 'PGRST116') {
        return NextResponse.json({ error: 'Produto n√£o encontrado' }, { status: 404 })
      }
      
      return NextResponse.json({ 
        error: 'Erro ao buscar produto. Verifique sua conex√£o com o banco de dados.',
        details: error.message 
      }, { status: 500 })
    }

    console.log('‚úÖ Produto encontrado no Supabase:', produto)
    return NextResponse.json(produto, { status: 200 })
  } catch (error) {
    console.error('‚ùå Erro interno na busca por ID:', error)
    return NextResponse.json({ error: 'Erro interno do servidor' }, { status: 500 })
  }
}

// PUT /api/produtos/[id] - Atualizar produto
export async function PUT(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const { id } = params
    console.log('üì° PUT /api/produtos/[id] - Atualizando produto:', id)
    
    const body = await request.json()
    console.log('üì¶ Dados recebidos para atualiza√ß√£o:', body)
    
    // Extrair token de autentica√ß√£o do header
    const authToken = request.headers.get('authorization')?.replace('Bearer ', '')
    console.log('üîê Token de autentica√ß√£o:', authToken ? 'Presente' : 'Ausente')
    
    const supabase = createAuthenticatedClient(authToken)
    
    if (!supabase) {
      console.error('‚ùå Supabase n√£o configurado')
      return NextResponse.json({ error: 'Supabase n√£o configurado' }, { status: 500 })
    }

    const updateData = {
      ...body,
      updated_at: new Date().toISOString()
    }

    console.log('üîÑ Tentando atualizar produto com dados:', updateData)

    const { data: produto, error } = await supabase
      .from('produtos')
      .update(updateData)
      .eq('id', id)
      .select()
      .single()

    if (error) {
      console.error('‚ùå Erro ao atualizar produto no Supabase:', error)
      console.error('‚ùå Detalhes do erro:', JSON.stringify(error, null, 2))
      return NextResponse.json({ 
        error: 'Erro ao atualizar produto. Verifique sua conex√£o com o banco de dados.',
        details: error.message 
      }, { status: 500 })
    }

    if (!produto) {
      console.log('‚ùå Produto n√£o encontrado para atualiza√ß√£o')
      return NextResponse.json({ error: 'Produto n√£o encontrado' }, { status: 404 })
    }

    console.log('‚úÖ Produto atualizado no Supabase:', produto)
    return NextResponse.json(produto, { status: 200 })
  } catch (error) {
    console.error('‚ùå Erro interno na atualiza√ß√£o:', error)
    return NextResponse.json({ error: 'Erro interno do servidor' }, { status: 500 })
  }
}

// DELETE /api/produtos/[id] - Excluir produto
export async function DELETE(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const { id } = params
    console.log('üì° DELETE /api/produtos/[id] - Excluindo produto:', id)
    
    // Extrair token de autentica√ß√£o do header
    const authToken = request.headers.get('authorization')?.replace('Bearer ', '')
    console.log('üîê Token de autentica√ß√£o:', authToken ? 'Presente' : 'Ausente')
    
    const supabase = createAuthenticatedClient(authToken)
    
    if (!supabase) {
      console.error('‚ùå Supabase n√£o configurado')
      return NextResponse.json({ error: 'Supabase n√£o configurado' }, { status: 500 })
    }

    console.log('üóëÔ∏è Tentando excluir produto com ID:', id)

    const { data: produto, error } = await supabase
      .from('produtos')
      .delete()
      .eq('id', id)
      .select()
      .single()

    if (error) {
      console.error('‚ùå Erro ao excluir produto no Supabase:', error)
      console.error('‚ùå Detalhes do erro:', JSON.stringify(error, null, 2))
      return NextResponse.json({ 
        error: 'Erro ao excluir produto. Verifique sua conex√£o com o banco de dados.',
        details: error.message 
      }, { status: 500 })
    }

    if (!produto) {
      console.log('‚ùå Produto n√£o encontrado para exclus√£o')
      return NextResponse.json({ error: 'Produto n√£o encontrado' }, { status: 404 })
    }

    console.log('‚úÖ Produto exclu√≠do no Supabase:', produto)
    return NextResponse.json({ message: 'Produto exclu√≠do com sucesso', produto })
  } catch (error) {
    console.error('‚ùå Erro interno na exclus√£o:', error)
    return NextResponse.json({ error: 'Erro interno do servidor' }, { status: 500 })
  }
}